// <auto-generated />
using FrameworkAPI.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FrameworkAPI.Migrations
{
    [DbContext(typeof(FrameworkAPIDbContext))]
    [Migration("20210519173404_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FrameworkAPI.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("IdGeo")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("Suite")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("IdPost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdPost");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bs")
                        .HasColumnType("text");

                    b.Property<string>("CatchPhrase")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Geo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdAddress")
                        .HasColumnType("integer");

                    b.Property<string>("Lat")
                        .HasColumnType("text");

                    b.Property<string>("Lng")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress")
                        .IsUnique();

                    b.ToTable("Geos");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdAlbum")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAlbum");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FrameworkAPI.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Guid")
                        .HasColumnType("text");

                    b.Property<int>("IdAddress")
                        .HasColumnType("integer");

                    b.Property<int>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Address", b =>
                {
                    b.HasOne("FrameworkAPI.Model.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("FrameworkAPI.Model.Address", "IdUser")
                        .HasConstraintName("UserAddressFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Album", b =>
                {
                    b.HasOne("FrameworkAPI.Model.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("AlbumUserFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Comment", b =>
                {
                    b.HasOne("FrameworkAPI.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("IdPost")
                        .HasConstraintName("CommentPostFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Geo", b =>
                {
                    b.HasOne("FrameworkAPI.Model.Address", "Address")
                        .WithOne("Geo")
                        .HasForeignKey("FrameworkAPI.Model.Geo", "IdAddress")
                        .HasConstraintName("AddressGeoFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Photo", b =>
                {
                    b.HasOne("FrameworkAPI.Model.Album", "Album")
                        .WithMany("Photos")
                        .HasForeignKey("IdAlbum")
                        .HasConstraintName("PhotoAlbumFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Post", b =>
                {
                    b.HasOne("FrameworkAPI.Model.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("PostUserFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FrameworkAPI.Model.User", b =>
                {
                    b.HasOne("FrameworkAPI.Model.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("UserCompanyFKConstraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Address", b =>
                {
                    b.Navigation("Geo");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Album", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FrameworkAPI.Model.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("FrameworkAPI.Model.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Albums");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
